#Questão 1

def find_judge(n,t):
  confiadores=[] #lista das pessoas que confiam em alguem. Não ha problema em existir elementos repetidos
  qnts_confiam= 0#contagem de quantas pessoas confiam em quem não confiam em ninguem
  confiado='k' #serve para marcar quem é possivelmente confiado por todos
  for i in t:
    confiadores.append(i[0])
  for j in range(n+1):
    if j not in confiadores: #verifica se tem alguem que nao confia em ninguem
      confiado=j
      for i in t:
        if i[1]==j:
          qnts_confiam +=1 #conta quantas pessoas confiam nessa pessoa
  if qnts_confiam==n-1:
    return confiado
  else:
    return -1

t = [ [ 1 , 3 ] , [ 2 , 3 ] , [ 3 , 1 ] ]
n=3
print(find_judge(n, t))


#Questão 3
#o codigo usado para solucionar essa questao esta no github de prog2 do professor
#econtrei um polinomio que da a altura em funcao da temperatura e outro que faz o contrario

X0=[15, 9, 5, 3, -2, -5, -15]
Y0=[200, 400, 600, 800, 1000, 1200, 1400]
polinomio0 = VandermondeMatrix(X0,Y0)
h=polinomio0.evaluate(0)
print(h)

Y1=[15, 9, 5, 3, -2, -5, -15]
X1=[200, 400, 600, 800, 1000, 1200, 1400]
polinomio1 = VandermondeMatrix(X1,Y1)
T=polinomio1.evaluate(700)
print(T)

