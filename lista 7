#Questão 1

def find_judge(n,t):
  confiadores=[] #lista das pessoas que confiam em alguem. Não ha problema em existir elementos repetidos
  qnts_confiam= 0#contagem de quantas pessoas confiam em quem não confiam em ninguem
  confiado='k' #serve para marcar quem é possivelmente confiado por todos
  for i in t:
    confiadores.append(i[0])
  for j in range(n+1):
    if j not in confiadores: #verifica se tem alguem que nao confia em ninguem
      confiado=j
      for i in t:
        if i[1]==j:
          qnts_confiam +=1 #conta quantas pessoas confiam nessa pessoa
  if qnts_confiam==n-1:
    return confiado
  else:
    return -1

t = [ [ 1 , 3 ] , [ 2 , 3 ] , [ 3 , 1 ] ]
n=3
print(find_judge(n, t))

#Questao 2
#a)
import math


class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n
    
    def encontrar(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.encontrar(self.parent[x])
        return self.parent[x]
    
    def uniao(self, x, y):
        rootX = self.encontrar(x)
        rootY = self.encontrar(y)
        
        if rootX != rootY:
            if self.rank[rootX] > self.rank[rootY]:
                self.parent[rootY] = rootX
            elif self.rank[rootX] < self.rank[rootY]:
                self.parent[rootX] = rootY
            else:
                self.parent[rootY] = rootX
                self.rank[rootX] += 1
            return True
        return False

def distancia(p1, p2):
    return math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)

def MST(points):
    n = len(points)
    edges = []
    
    for i in range(n):
        for j in range(i + 1, n):
            distance = distancia(points[i], points[j])
            edges.append((distance, i, j))
    
    # Ordenação das arestas pela distância
    edges.sort()
    
    uf = UnionFind(n) #evita ciclos
    
    mst = []
    total_weight = 0

    for weight, u, v in edges:
        if uf.uniao(u, v):
            mst.append((u, v, weight))
            total_weight += weight
    
    return mst, total_weight

if __name__ == "__main__":
    pontos = [(0, 0), (1, 0), (0, 1), (1, 1), (2, 0)]
    
    mst, total_weight = MST(pontos)
    
    print("Minimum Spanning Tree (MST):")
    for u, v, weight in mst:
        print(f"Conectar ponto {pontos[u]} com ponto {pontos[v]} com peso {weight:.2f}")
    print(f"Peso total da MST: {total_weight:.2f}")

#b) como temos da ordem de n**2 arestas, ordenar elas é O(n**2log(n)). Ou seja a cota nlog(n) é uma cota inferior para esse problema
#c) O algoritmo implementado por mim não é otimo 


#Questão 3
#o codigo usado para solucionar essa questao esta no github de prog2 do professor
#econtrei um polinomio que da a altura em funcao da temperatura e outro que faz o contrario

X0=[15, 9, 5, 3, -2, -5, -15]
Y0=[200, 400, 600, 800, 1000, 1200, 1400]
polinomio0 = VandermondeMatrix(X0,Y0)
h=polinomio0.evaluate(0)
print(h)

Y1=[15, 9, 5, 3, -2, -5, -15]
X1=[200, 400, 600, 800, 1000, 1200, 1400]
polinomio1 = VandermondeMatrix(X1,Y1)
T=polinomio1.evaluate(700)
print(T)

#Questão 4

def newton_root(func, intervalo, erroTol: float = 1e-16, maxItr: int = 10000, eps: float = 1e-6 ):
  x=intervalo.haf
  for _ in range(maxItr):
    fx = func(x)
    if abs(fx)< erroTol:
      return x
    derivada=func.prime_safe(x)
    if derivada<eps:
      raise ValueError("Derivada muito pequena")
    x=x-(fx/derivada)



if __name__=="__main__":
  class funcTest(RealFunction): #testando realfunction
    f = lambda self, x : np.power(x, 2)- 1
    prime = lambda self, x : 2*x
    domain = Interval(-2, 2)

  intervalo=Interval(-2, 0) 
  ft = funcTest()
  print(newton_root(ft,intervalo )) #testando metodo de newton

  print(bissect(ft, intervalo)) #testanto a funcao bissect

  intervalo = grid_search(ft, intervalo) #testando grid_search
  print(intervalo)

#Questão 5
from scipy.interpolate import lagrange
import matplotlib.pyplot as plt
import time

class LagrangePol:
  def __init__(self, x, y):
    self.x = x
    self.y = y

  def polinomio(self):
    polinomio = lagrange(self.x, self.y)
    return polinomio

#codigo para contagem de tempo da construção dos polinomios

def measure_time(metodo, x, y):
    start_time = time.time()
    metodo(x, y)
    end_time = time.time()
    return end_time - start_time


lagrange_pol = LagrangePol(X1, Y1)
time_lagrange = measure_time(lambda x, y: lagrange_pol.polinomio(), X1, Y1)

vandermondepol=VandermondeMatrix(X1,Y1)
time_vandermonde = measure_time(lambda x, y: VandermondeMatrix(X1,Y1), X1, Y1)

print(f"Tempo para o polinômio de Lagrange (scipy.interpolate.lagrange): {time_lagrange:.6f} segundos")
print(f"Tempo para o polinômio de Vandermonde: {time_vandermonde:.6f} segundos")

